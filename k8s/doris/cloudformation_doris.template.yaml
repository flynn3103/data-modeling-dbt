AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Doris on Amazon Web Services in a new VPC.'
Metadata:
  LICENSE: Apache License Version 2.0
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying Doris into an new VPC"
    Order: "1"
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - VPCID
      - PublicSubnetID
    - Label:
        default: EC2 configuration
      Parameters:
      - KeyPairName
    - Label:
        default: Environment configuration
      Parameters:
      - DorisVersion

    # Doris Cluster configuration
    - Label:
        default: Doris Cluster configuration
      Parameters:
      - FeNodeCount
      - FeNodeInstanceType
      - BeNodeCount
      - BeNodeInstanceType

    # Fe configuration
    - Label:
        default: Fe configuration
      Parameters:
      - LogDir
      - LogLevel
      - MetaDir

    # BE configuration
    - Label:
        default: BE configuration
      Parameters:
      - SysLogDir
      - SysLogLevel
      - VolumeType
      - VolumeSize
      
    ParameterLabels:
      VPCID:
        default: VPC ID
      PublicSubnetID:
        default: Public Subnet ID
      KeyPairName:
        default: Key pair name
      DorisVersion:
        default: Version of Doris
      FeNodeCount:
        default: Number of Doris Fe
      FeNodeInstanceType:
        default: Fe instance type
      BeNodeCount:
        default: Number of Doris Be
      BeNodeInstanceType:
        default: Be instance type

      # FE
      LogLevel:
        default: Sys Log Level
      MetaDir:
        default: Meta data dir
      
      # BE
      SysLogLevel:
        default: Sys Log Level
      VolumeType:
        default: Volume type of Be nodes
      VolumeSize:
        default: Volume size of Be nodes
Parameters:
  VPCID:
    Description: ID of your existing VPC for deployment(e.g., vpc-fd990584)
    Type: AWS::EC2::VPC::Id
  PublicSubnetID:
    Description: ID of public subnet in Availability Zone for the ELB load balancer (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  KeyPairName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Public/private key pairs allow you to securely connect to your instance after it launches.
  DorisVersion:
    Description: Version of Doris
    Type: String
    AllowedValues: 
      - "213"
      - "206"
  FeNodeCount:
    Type: Number
    Default: 1
    Description: Number of Doris Fe
    AllowedValues: 
      - 1
  FeNodeInstanceType:
    AllowedValues:
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
    Default: t3.large
    Description: Amazon EC2 instance type for fe instances.
    Type: String
  BeNodeCount:
    Type: Number
    Default: 3
    Description: Number of Doris Be
    AllowedValues: 
      - 1
      - 3
      - 5
  BeNodeInstanceType:
    AllowedValues:
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
    Default: t3.large
    Description: Amazon EC2 instance type for be instances.
    Type: String

  # Fe
  LogLevel:
    Description: Sys Log Level, please select from the drop-down menu
    Type: String
    Default: INFO
    AllowedValues: 
      - INFO
      - WARN
      - ERROR
      - FATAL
  MetaDir:
    Description: Dir to save meta data, please fill it in the absolute path
    Type: String
    Default: feDefaultMetaPath

  # Be
  SysLogLevel:
    Description: Sys Log Level, please select from the drop-down menu
    Type: String
    Default: INFO
    AllowedValues: 
      - INFO
      - WARN
      - ERROR
      - FATAL
  VolumeType: 
    Type: String
    Description: EBS volume type (data) to be attached to node in GBs [gp2,gp3,st1], one volume for data storage is mounted automatically by CloudFormation stack.
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - st1
      - io1
  VolumeSize: 
    Type: String
    Description: EBS volume size (data) to be attached to node in GBs.
    Default: 50
Conditions:
  1BeNodesCondition: !Or 
    - !Equals [!Ref 'BeNodeCount', '1']
    - !Equals [!Ref 'BeNodeCount', '2']
    - !Equals [!Ref 'BeNodeCount', '3']
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
  2BeNodesCondition: !Or  
    - !Equals [!Ref 'BeNodeCount', '2']
    - !Equals [!Ref 'BeNodeCount', '3']
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
  3BeNodesCondition: !Or 
    - !Equals [!Ref 'BeNodeCount', '3']
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
  4BeNodesCondition: !Or  
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
  5BeNodesCondition: !Equals [!Ref 'BeNodeCount', '5']
Mappings: 
    DorisVersionWithDownloadPackage: 
      us-east-1: 
        "213": https://selectdb-cloud-online-us-east-1.s3.amazonaws.com/doris/2.1.3/apache-doris-2.1.3-bin-x64.tar.gz
        "206": https://selectdb-cloud-online-us-east-1.s3.amazonaws.com/doris/2.0.6/apache-doris-2.0.6-bin-x64.tar.gz
      us-west-1: 
        "213": https://selectdb-cloud-online-us-west-1.s3.amazonaws.com/doris/2.1.3/apache-doris-2.1.3-bin-x64.tar.gz
        "206": https://selectdb-cloud-online-us-west-1.s3.amazonaws.com/doris/2.0.6/apache-doris-2.0.6-bin-x64.tar.gz
      us-west-2: 
        "213": https://selectdb-cloud-online-us-west-2.s3.amazonaws.com/doris/2.1.3/apache-doris-2.1.3-bin-x64.tar.gz
        "206": https://selectdb-cloud-online-us-west-2.s3.amazonaws.com/doris/2.0.6/apache-doris-2.0.6-bin-x64.tar.gz
    JDKWithDownloadPackage: 
      us-east-1: 
        DownloadURL: https://selectdb-cloud-online-us-east-1.s3.amazonaws.com/doris/jdk-linux_x64.tar.gz
      us-west-1: 
        DownloadURL: https://selectdb-cloud-online-us-west-1.s3.amazonaws.com/doris/jdk-linux_x64.tar.gz
      us-west-2: 
        DownloadURL: https://selectdb-cloud-online-us-west-2.s3.amazonaws.com/doris/jdk-linux_x64.tar.gz
    ImageAmi: 
      us-east-1: 
        ImageAmiID: ami-02d7fd1c2af6eead0
      us-west-1: 
        ImageAmiID: ami-0830c9faf0efc29ff
      us-west-2: 
        ImageAmiID: ami-0c7843ce70e666e51
Resources:
  # temporary role, used for executing lambda function.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
          Condition: {}
      Path: /
      Policies:
        - PolicyName: QuerySubnet
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:DescribeRouteTables
                  - ec2:DescribeVpcEndpoints
                  - ec2:ModifyVpcAttribute
                  - ec2:CreateVpcEndpoint
                  - ec2:DescribePrefixLists
                  - ec2:CreateInstanceConnectEndpoint
                  - ec2:DescribeInstanceConnectEndpoints
                  - ec2:CreateNetworkInterface
                  - ec2:CreateTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: '*'
  # 执行vpc是否启用Dns解析能力的检查操作              
  SubnetQueryEnableDns:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomFunctionEnableDns.Arn
      VpcId: !Ref VPCID

  # vpc启用Dns解析能力，clf原生不支持，需要lambda函数
  CustomFunctionEnableDns:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: python3.12
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib

          def sendResponse(event, context, responseData, responseStatus="FAILED"):
            response_body = json.dumps({
              "Status": responseStatus,
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"],
              "Data":responseData
            })
            # Not using the old .put (deprecated)
            enc_body = response_body.encode('utf-8')
            opener = urllib.request.build_opener(urllib.request.HTTPHandler)
            request = urllib.request.Request(event['ResponseURL'], data=enc_body)
            request.add_header('Content-Type', '')
            request.add_header('Content-Length', len(response_body))
            request.get_method = lambda: 'PUT'
            response = opener.open(request)
            print("RESPONSE {}: {}".format(response.getcode(), response.msg))

          def lambda_handler(event, context):
            # Delete...
            if event['RequestType'] == 'Delete':
              sendResponse(event, context, {"Message": "DELETE"}, "SUCCESS")
              return '{}'
            response = {}
            try:
              ec2 = boto3.client('ec2')
              vpcId = event["ResourceProperties"].get("VpcId")
              respVpc = ec2.modify_vpc_attribute(
                EnableDnsSupport={'Value': True},
                VpcId=vpcId
              )
              respVpc2 = ec2.modify_vpc_attribute(
                EnableDnsHostnames={'Value': True},
                VpcId=vpcId
              )
              sendResponse(event, context, response, "SUCCESS")
              return
            except Exception as e:
              print(str(e))
              sendResponse(event, context, {"Value": str(e)})
  CustomFunctionCreateS3Endpoint:
    Type: AWS::Lambda::Function
    DependsOn:
      - SubnetQueryEnableDns
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: python3.12
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib

          def sendResponse(event, context, responseData, responseStatus="FAILED"):
            response_body = json.dumps({
              "Status": responseStatus,
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"],
              "Data":responseData
            })
            # Not using the old .put (deprecated)
            enc_body = response_body.encode('utf-8')
            opener = urllib.request.build_opener(urllib.request.HTTPHandler)
            request = urllib.request.Request(event['ResponseURL'], data=enc_body)
            request.add_header('Content-Type', '')
            request.add_header('Content-Length', len(response_body))
            request.get_method = lambda: 'PUT'
            response = opener.open(request)
            print("RESPONSE {}: {}".format(response.getcode(), response.msg))

          def lambda_handler(event, context):
            # Delete...
            if event['RequestType'] == 'Delete':
              sendResponse(event, context, {"Message": "DELETE"}, "SUCCESS")
              return '{}'

            routetable = ''
            try:
              ec2 = boto3.client('ec2')
              subnet = event["ResourceProperties"].get("SubnetId")
              vpcId = event["ResourceProperties"].get("VpcId")
              region = event["ResourceProperties"].get("Region")
              resp = ec2.describe_route_tables(
                Filters=
                  [
                    {
                      'Name': 'association.subnet-id',
                      'Values': [subnet]
                    }
                  ]
              )
              if len(resp['RouteTables']) == 0:
                resp = ec2.describe_route_tables(
                  Filters=
                    [
                      {
                        'Name': 'association.main',
                        'Values': ['true']
                      },
                      {
                        'Name': 'vpc-id',
                        'Values': [vpcId]
                      }
                    ]
                )
              # Anyway, a routetable is needed.
              fullS3Servicename = "com.amazonaws." + region + ".s3"
              getS3PrefixResponse = ec2.describe_prefix_lists(
                Filters=
                  [
                    {
                      'Name': 'prefix-list-name',
                      'Values': [fullS3Servicename]
                    }
                  ]
              )
              fullS3ServicePrefix = getS3PrefixResponse['PrefixLists'][0]['PrefixListId']

              needCreateS3 = True
              routetable = resp['RouteTables'][0]
              for route in routetable['Routes']:
                if 'DestinationPrefixListId' in route:
                  if route['DestinationPrefixListId'] == fullS3ServicePrefix:
                    needCreateS3 = False

              if needCreateS3:
                createResp = ec2.create_vpc_endpoint(
                  VpcEndpointType='Gateway',
                  VpcId=vpcId,
                  ServiceName=fullS3Servicename,
                  RouteTableIds=[routetable['RouteTableId']]
                )
                print(str(needCreateS3))
                sendResponse(event, context, {"Message": "CREATED"}, "SUCCESS")
                return '{}'

              print(str(needCreateS3))
              sendResponse(event, context, {"Message": "CREATE_SKIPPED"}, "SUCCESS")
            except Exception as e:
              print(str(e))
              sendResponse(event, context, {"Value": str(e)})              
  SubnetQueryCreateS3Endpoint:
    Type: Custom::CustomResource
    DependsOn:
      - SubnetQueryEnableDns
    Properties:
      ServiceToken: !GetAtt CustomFunctionCreateS3Endpoint.Arn
      SubnetId: !Ref PublicSubnetID
      VpcId: !Ref VPCID
      Region: !Ref AWS::Region
  BastionStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SubnetQueryCreateS3Endpoint
    Properties:
      TemplateURL: https://sdb-cloud-third-party.s3.amazonaws.com/doris-cf/doris_bastion.template.yaml
      Parameters:
        KeyPairName: !Ref KeyPairName
        VPCID: !Ref VPCID
        PublicSubnetID: !Ref PublicSubnetID
        LatestAmiId: !FindInMap [ImageAmi, !Ref "AWS::Region", ImageAmiID]
        RemoteAccessCIDR: 0.0.0.0/0
  SecurityGroupStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SubnetQueryCreateS3Endpoint
    Properties:
      TemplateURL: https://sdb-cloud-third-party.s3.amazonaws.com/doris-cf/doris_sec_group.template.yaml
      Parameters:
        VPCID: !Ref VPCID
        VPCCIDR: 0.0.0.0/0
        BastionSecurityGroupID: !GetAtt BastionStack.Outputs.BastionSecurityGroupID
  CfnEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - SubnetQueryEnableDns
    Properties:
      VpcId: !Ref VPCID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: 
        !GetAtt SubnetQueryGetEnablePvDCfn.CanEnablePrivateDns
      SubnetIds:
        - !Ref PublicSubnetID
      SecurityGroupIds:
          - !GetAtt SecurityGroupStack.Outputs.DorisServerSecurityGroup
          - !GetAtt BastionStack.Outputs.BastionSecurityGroupID
  
  CustomFunctionGetEnablePvD:
    Type: AWS::Lambda::Function
    DependsOn:
      - SubnetQueryEnableDns
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: python3.12
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib

          def sendResponse(event, context, responseData, responseStatus="FAILED"):
            response_body = json.dumps({
              "Status": responseStatus,
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              "PhysicalResourceId": context.log_stream_name,
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"],
              "Data":responseData
            })
            # Not using the old .put (deprecated)
            enc_body = response_body.encode('utf-8')
            opener = urllib.request.build_opener(urllib.request.HTTPHandler)
            request = urllib.request.Request(event['ResponseURL'], data=enc_body)
            request.add_header('Content-Type', '')
            request.add_header('Content-Length', len(response_body))
            request.get_method = lambda: 'PUT'
            response = opener.open(request)
            print("RESPONSE {}: {}".format(response.getcode(), response.msg))

          def lambda_handler(event, context):
            # Delete...
            if event['RequestType'] == 'Delete':
              sendResponse(event, context, {"Message": "DELETE"}, "SUCCESS")
              return '{}'
            response = {"CanEnablePrivateDns": False}
            try:
              ec2 = boto3.client('ec2')
              vpcId = event["ResourceProperties"].get("VpcId")
              endpointServiceName = event["ResourceProperties"].get("EndpointServiceName")
              respVpcEndpoint = ec2.describe_vpc_endpoints(
                Filters=
                  [
                    {
                      'Name': 'service-name',
                      'Values': [endpointServiceName]
                    },
                    {
                      'Name': 'vpc-id',
                      'Values': [vpcId]
                    }
                  ]
              )
              if len(respVpcEndpoint['VpcEndpoints']) == 0:
                response["CanEnablePrivateDns"] = True
                print(str(response["CanEnablePrivateDns"]))
                sendResponse(event, context, response, "SUCCESS")
                return
                
              dnsEnabled = respVpcEndpoint['VpcEndpoints'][0]['PrivateDnsEnabled']
              if not dnsEnabled:
                response["CanEnablePrivateDns"] = True
                
              print(str(response["CanEnablePrivateDns"]))
              sendResponse(event, context, response, "SUCCESS")
              return
            except Exception as e:
              print(str(e))
              sendResponse(event, context, {"Value": str(e)})
  SubnetQueryGetEnablePvDCfn:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomFunctionGetEnablePvD.Arn
      EndpointServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcId: !Ref VPCID
  BeStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SubnetQueryCreateS3Endpoint
      - CfnEndpoint
    Properties:
      TemplateURL: https://sdb-cloud-third-party.s3.amazonaws.com/doris-cf/doris_be.template.yaml
      Parameters:
        BeNodeCount: !Ref BeNodeCount
        PrivateSubnetID: !Ref PublicSubnetID
        DorisServerSecurityGroup: !GetAtt SecurityGroupStack.Outputs.DorisServerSecurityGroup
        KeyPairName: !Ref KeyPairName
        LatestAmiId: !FindInMap [ImageAmi, !Ref "AWS::Region", ImageAmiID]
        JDKDownLoadURL: !FindInMap [JDKWithDownloadPackage, !Ref "AWS::Region", DownloadURL]
        DorisDownLoadURL: !FindInMap [DorisVersionWithDownloadPackage, !Ref "AWS::Region", !Ref DorisVersion]
        BeNodeInstanceType: !Ref BeNodeInstanceType
        SysLogDir: beDefaultLogPath
        SysLogLevel: !Ref SysLogLevel
        VolumeType: !Ref VolumeType
        VolumeSize: !Ref VolumeSize
  FeStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SubnetQueryCreateS3Endpoint
      - CfnEndpoint
    Properties:
      TemplateURL: https://sdb-cloud-third-party.s3.amazonaws.com/doris-cf/doris_fe.template.yaml
      Parameters:
        PrivateSubnetID: !Ref PublicSubnetID
        DorisServerSecurityGroup: !GetAtt SecurityGroupStack.Outputs.DorisServerSecurityGroup
        KeyPairName: !Ref KeyPairName
        LatestAmiId: !FindInMap [ImageAmi, !Ref "AWS::Region", ImageAmiID]
        JDKDownLoadURL: !FindInMap [JDKWithDownloadPackage, !Ref "AWS::Region", DownloadURL]
        DorisDownLoadURL: !FindInMap [DorisVersionWithDownloadPackage, !Ref "AWS::Region", !Ref DorisVersion]
        FeNodeInstanceType: !Ref FeNodeInstanceType
        FeNodeCount: !Ref FeNodeCount
        LogDir: feDefaultLogPath
        SysLogLevel: !Ref LogLevel
        MetaDir: !Ref MetaDir
        VolumeType: !Ref VolumeType
        BeInstancePrivateIp1: !If
          - 1BeNodesCondition
          - !GetAtt BeStack.Outputs.BeInstancePrivateIp1
          - 0.0.0.0
        BeInstancePrivateIp2: !If
          - 2BeNodesCondition
          - !GetAtt BeStack.Outputs.BeInstancePrivateIp2
          - 0.0.0.0
        BeInstancePrivateIp3: !If
          - 3BeNodesCondition
          - !GetAtt BeStack.Outputs.BeInstancePrivateIp3
          - 0.0.0.0
        BeInstancePrivateIp4: !If
          - 4BeNodesCondition
          - !GetAtt BeStack.Outputs.BeInstancePrivateIp4
          - 0.0.0.0
        BeInstancePrivateIp5: !If
          - 5BeNodesCondition
          - !GetAtt BeStack.Outputs.BeInstancePrivateIp5
          - 0.0.0.0
